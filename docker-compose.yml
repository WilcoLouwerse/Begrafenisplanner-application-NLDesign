version: '3.5'

x-cache:
  &cache
  cache_from:
    - ${CONTAINER_REGISTRY_BASE}/${CONTAINER_PROJECT_NAME}-php
    - ${CONTAINER_REGISTRY_BASE}/${CONTAINER_PROJECT_NAME}-nginx
    - ${CONTAINER_REGISTRY_BASE}/${CONTAINER_PROJECT_NAME}-varnish
    - ${CONTAINER_REGISTRY_BASE}/${CONTAINER_PROJECT_NAME}-admin
    - ${CONTAINER_REGISTRY_BASE}/${CONTAINER_PROJECT_NAME}-client

services:
  php:
    &php
    image: ${CONTAINER_REGISTRY_BASE}/${CONTAINER_PROJECT_NAME}-php:${APP_ENV}
    build:
      context: ./api
      target: api_platform_php
      <<: *cache
    depends_on:
      - db
    volumes:
      - ./api:/srv/api:rw,cached
      - ./nlx-setup:/cert:rw,cached
      #- ./nlx-setup:/Users/<your-username>/nlx-setup:rw,cached
      # If you develop on Linux, uncomment the following line to use a bind-mounted host directory instead
      # - ./api/var:/srv/api/var:rw
    environment:
      - CONTAINER_REGISTRY_BASE=${CONTAINER_REGISTRY_BASE}
      - CONTAINER_PROJECT_NAME=${CONTAINER_PROJECT_NAME}
      - CONTAINER_REPRO=${CONTAINER_REPRO}
      #- DATABASE_URL=postgres://api-platform:!ChangeMe!@db/api?serverVersion=10.1
      - DATABASE_URL=mysql://api-platform:!ChangeMe!@db/api?serverVersion=10.1
      - APP_ENV=${APP_ENV}
      - APP_DEBUG=${APP_DEBUG} 
      - APP_CACHE=${APP_CACHE}
      - APP_VERSION=${APP_VERSION}    
      - APP_NAME=${APP_NAME} 
      - APP_TITLE=${APP_TITLE}
      - APP_ID=${APP_ID}
      - APP_DOMAIN=${APP_DOMAIN}
      - APP_SUBDOMAIN=${APP_SUBDOMAIN}
      - APP_DEMO=${APP_DEMO}
      - APP_REPRO=${APP_REPRO}
      - APP_CONTAINER=${APP_CONTAINER}
      - APP_DESCRIPTION=${APP_DESCRIPTION}
      - APP_TYPE=${APP_TYPE}
      - APP_LOGO=${APP_LOGO}
      - APP_HOME=${APP_HOME}
      - APP_COMMONGROUND_ID=${APP_COMMONGROUND_ID}
      - APP_COMMONGROUND_KEY=${APP_COMMONGROUND_KEY}
      - APP_APPLICATION_KEY=${APP_APPLICATION_KEY}
      - APP_USER_KEY=${APP_USER_KEY}
      - ORGANIZATION_NAME=${ORGANIZATION_NAME}
      - ORGANIZATION_EMAIL_ADDRESS=${ORGANIZATION_EMAIL_ADDRESS}
      - ORGANIZATION_COUNTRY_NAME=${ORGANIZATION_COUNTRY_NAME}
      - ORGANIZATION_STATE=${ORGANIZATION_STATE}
      - ORGANIZATION_LOCALITY=${ORGANIZATION_LOCALITY}
      - ORGANIZATION_UNIT_NAME=${ORGANIZATION_UNIT_NAME}
      - TRUSTED_PROXIES=${TRUSTED_PROXIES}
      - TRUSTED_HOSTS=${TRUSTED_HOSTS}
      - AUTH_ENABLED=${AUTH_ENABLED}
      - AUTH_PROVIDER_USER=${AUTH_PROVIDER_USER}
      - AUTH_PROVIDER_APPLICATION=${AUTH_PROVIDER_APPLICATION}
      - AUDITTRAIL_ENABLED=${AUDITTRAIL_ENABLED}
      - NOTIFICATION_ENABLED=${NOTIFICATION_ENABLED}
      - HEALTH_ENABLED=${HEALTH_ENABLED}
      - ARCHIVE_ENABLED=${ARCHIVE_ENABLED}
      - NLX_OUTWAY=${NLX_OUTWAY}
      - NLX_INWAY=${NLX_INWAY}
    ports:
      - "82:80"

  api:
    image: ${CONTAINER_REGISTRY_BASE}/${CONTAINER_PROJECT_NAME}-nginx:${APP_ENV}
    build:
      context: ./api
      target: api_platform_nginx
      <<: *cache
    depends_on:
      - php
    # Comment out this volume in production if you do not want to use nlx
    #  - nlx-outway
    # If you us this docker-compose file for production enviroments and want to us nlx-inway uncomment the following lins
    #  - nlx-inway
    # Comment out this volume in production
    volumes:
      - ./api/public:/srv/api/public:ro
    ports:
      - "80:80"
    environment:
      - NGINX_HOST=php

  cache-proxy:
    &varnish
    image: ${CONTAINER_REGISTRY_BASE}/${CONTAINER_PROJECT_NAME}-varnish:${APP_ENV}
    build:
      context: ./api
      target: api_platform_varnish
      <<: *cache
    depends_on:
      - api
      - php
    volumes:
      - ./api/docker/varnish/conf:/usr/local/etc/varnish:rw,cached
    tmpfs:
      - /usr/local/var/varnish:exec
    ports:
     - "81:80"
    environment:
     - BACKENDS=php
      
  nlx-outway:
    image: ${CONTAINER_REGISTRY_BASE}/${CONTAINER_PROJECT_NAME}-nlx-outway:${APP_ENV}
    build:
      context: ./api
      target: api-nlx-outway
    depends_on:
      - nlx-postgres
    volumes:
      - ./api/nlx-setup:/certs:rw,cached
    environment:
      - DIRECTORY_INSPECTION_ADDRESS=directory-inspection-api.demo.nlx.io:443 
      - TLS_NLX_ROOT_CERT=/certs/root.crt 
      - TLS_ORG_CERT=/certs/org.crt 
      - TLS_ORG_KEY=/certs/org.key 
      - POSTGRES_DSN=postgres://postgres:postgres@nlx-postgres/txlog-db?sslmode=disable&connect_timeout=10
    networks:
      - nlx
    
 # Uncomment the follwoign lines if you want to deploy trough a docker-compose chart and wish to use an nlx inway
 # 
 # nlx-inway:
 #   image: ${CONTAINER_REGISTRY_BASE}/${CONTAINER_PROJECT_NAME}-nlx-inway:${APP_ENV}
 #   build:
 #     context: ./api
 #     target: api-nlx-inway
 #   depends_on:
 #     - nlx-postgres
 #   volumes:
 #     - ./api/nlx-setup:/certs:rw,cached
 #   environment:
 #     - DIRECTORY_REGISTRATION_ADDRESS=directory-registration-api.demo.nlx.io:443 
 #     - SELF_ADDRESS=pc.zaakonline.nl:443 
 #     - SERVICE_CONFIG=/service-config.toml 
 #     - TLS_NLX_ROOT_CERT=/certs/root.crt 
 #     - TLS_ORG_CERT=/certs/org.crt 
 #     - TLS_ORG_KEY=/certs/org.key 
 #     - POSTGRES_DSN=postgres://postgres:postgres@nlx-postgres/txlog-db?sslmode=disable&connect_timeout=10
 #   networks:
 #     -  nlx
  
  # Comment out this service in production if you do not want to use nlx
  nlx-postgres:
    image: postgres:12
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: txlog-db
      POSTGRES_USER: postgres
    volumes:
      - nlx-data-2:/var/lib/postgresql/data:rw
    networks:
      - nlx
      
  # Comment out this service in production if you do not want to use nlx
  txlog-db:
    image: nlxio/txlog-db
    depends_on:
      - nlx-postgres
      - nlx-outway
    # If you us this docker-compose file for production enviroments and want to us nlx-inway uncomment the following lins
    #  - nlx-inway
    environment:
      PGHOST: nlx-postgres
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: txlog-db
    command: /usr/local/bin/upgrade-db.sh
    networks:
      - nlx
    
  #db:
  #  image: postgres:10-alpine
  #  environment:
  #    - POSTGRES_DB=api
  #    - POSTGRES_USER=api-platform
      # You should definitely change the password in production
  #    - POSTGRES_PASSWORD=!ChangeMe!
  #  volumes:
  #    - db-data:/var/lib/postgresql/data:rw
    
  db:
    image: mysql:5.7
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=example
      - MYSQL_DATABASE=api
      - MYSQL_USER=api-platform
      - MYSQL_PASSWORD=!ChangeMe!
    volumes:
      - db-mysql:/var/lib/mysql:rw 
    ports:
     - "3366:3306"

  mercure:
    # In production, you may want to use the managed version of Mercure, https://mercure.rocks
    image: dunglas/mercure
    environment:
      # You should definitely change all these values in production
      - JWT_KEY=!UnsecureChangeMe!
      - ALLOW_ANONYMOUS=1
      - CORS_ALLOWED_ORIGINS=*
      - PUBLISH_ALLOWED_ORIGINS=http://localhost:1337,https://localhost:1338
      - DEMO=1
    ports:
      - "1337:80"

networks:
  nlx:
    name: nlx

volumes:
  db-data: {}
  db-mysql: {}
  nlx-data-2: {}
